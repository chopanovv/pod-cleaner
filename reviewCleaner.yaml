apiVersion: v1
kind: ConfigMap
metadata:
  name: cleaner-review
  namespace: default
data:
  cleanup.sh: |
    #!/bin/bash

    # Get a list of all namespaces in the Kubernetes cluster
    namespaces=$(kubectl get namespaces -o jsonpath='{.items[*].metadata.name}')

    # Loop through each namespace
    for ns in $namespaces; do
      echo "Checking for Helm release named 'review' in namespace $ns"
      
      # Check if there is a Helm release named "review" in the current namespace
      helm_release=$(helm ls --namespace "$ns" --short | grep "^review$")

      # If there is a Helm release named "review" in the current namespace, uninstall it
      if [[ -n "$helm_release" ]]; then
        echo "Uninstalling Helm release named 'review' in namespace $ns"
        helm uninstall --namespace "$ns" review
      fi
    done
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: cleaner-review
  namespace: default
spec:
  schedule: "0 0 * * *"
  failedJobsHistoryLimit: 1
  successfulJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: cleaner-pod
          volumes:
            - name: cleaner-review
              configMap:
                name: cleaner-review
                defaultMode: 511
          containers:
            - name: kubectl-runner
              image: portainer/kubectl-shell:latest
              command: ["/bin/bash", "-c", "/home/cleanup.sh"]
              volumeMounts:
                - name: cleaner-review
                  mountPath: /home/cleanup.sh
                  subPath: cleanup.sh
          restartPolicy: OnFailure
